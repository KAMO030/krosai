package io.github.krosai.openai.api.chat

import io.github.krosai.core.chat.message.MessageType
import io.github.krosai.core.util.DefaultJsonConverter
import io.github.krosai.openai.api.chat.ChatCompletionMessage.Role
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.encodeToString

/**
 * Message comprising the conversation.
 *
 * @param content The contents of the message..
 * The response message content is always a [String].
 * @param role The role of the messages author. Could be one of the [Role] types.
 * @param name An optional name for the participant. Provides the model information to differentiate between
 * participants of the same role. In case of Function calling, the name is the function name that the message is
 * responding to.
 * @param toolCallId Tool call that this message is responding to. Only applicable for the [Role.TOOL] role
 * and null otherwise.
 * @param toolCalls The tool calls generated by the model, such as function calls. Applicable only for
 * [Role.TOOL] role and null otherwise.
 */

@Serializable
data class ChatCompletionMessage(
    @SerialName("content") val content: String? = null,
    @SerialName("role") val role: Role = Role.ASSISTANT,
    @SerialName("name") val name: String? = null,
    @SerialName("tool_call_id") val toolCallId: String? = null,
    @SerialName("tool_calls") val toolCalls: List<ToolCall>? = null,
) {

    constructor(
        mediaContentList: List<MediaContent>,
        role: Role = Role.ASSISTANT,
        name: String? = null,
        toolCallId: String? = null,
        toolCalls: List<ToolCall>? = null
    ) : this(DefaultJsonConverter.encodeToString(mediaContentList), role, name, toolCallId, toolCalls)


    /**
     * The role of the author of this message.
     */
    @Serializable
    enum class Role(val value: String) {
        /**
         * System message.
         */
        @SerialName("system")
        SYSTEM("system"),

        /**
         * User message.
         */
        @SerialName("user")
        USER("user"),

        /**
         * Assistant message.
         */
        @SerialName("assistant")
        ASSISTANT("assistant"),

        /**
         * Tool message.
         */
        @SerialName("tool")
        TOOL("tool");

        companion object {
            fun fromMessageType(messageType: MessageType): Role =
                when (messageType) {
                    MessageType.USER -> USER
                    MessageType.SYSTEM -> SYSTEM
                    MessageType.ASSISTANT -> ASSISTANT
                    MessageType.TOOL -> TOOL
                }

        }

    }

    /**
     * An array of content parts with a defined type.
     * Each MediaContent can be of either "text" or "image_url" type. Not both.
     *
     * @param type Content  type, each can be of type text or image_url.
     * @param text The text content of the message.
     * @param imageUrl The image content of the message. You can pass multiple
     * images by adding multiple image_url content parts. Image input is only
     * supported when using the glm-4v model.
     */
    @Serializable
    data class MediaContent(
        @SerialName("type") val type: String,
        @SerialName("text") val text: String?,
        @SerialName("image_url") val imageUrl: ImageUrl?
    ) {

        /**
         * @param url Either a URL of the image or the base64 encoded image data.
         * The base64 encoded image data must have a special prefix in the following format:
         * "data:{mimetype};base64,{base64-encoded-image-data}".
         * @param detail Specifies the detail level of the image.
         */
        @Serializable
        data class ImageUrl(
            @SerialName("url") val url: String,
            @SerialName("detail") val detail: String? = null
        )

        /**
         * Shortcut constructor for a text content.
         * @param text The text content of the message.
         */
        constructor(text: String) : this("text", text, null)

        /**
         * Shortcut constructor for an image content.
         * @param imageUrl The image content of the message.
         */
        constructor(imageUrl: ImageUrl) : this("image_url", null, imageUrl)

    }

    /**
     * The relevant tool call.
     *
     * @param id The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the
     * Submit tool outputs to run endpoint.
     * @param type The type of tool call the output is required for. For now, this is always function.
     * @param function The function definition.
     */
    @Serializable
    data class ToolCall(
        @SerialName("id") val id: String?,
        @SerialName("type") val type: String?,
        @SerialName("function") val function: ChatCompletionFunction
    )

    /**
     * The function definition.
     *
     * @param name The name of the function.
     * @param arguments The arguments that the model expects you to pass to the function.
     */
    @Serializable
    data class ChatCompletionFunction(
        @SerialName("name") val name: String?,
        @SerialName("arguments") val arguments: String
    )

}